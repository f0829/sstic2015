def add_video_format(fpath)
  extensions = [ 'webm', 'mp4' ]
  data = File.open(fpath).read
  if data =~ /(\<video src="([^"]+)" controls\>)/
    s = $1
    url = $2
    file = url.split('/').last
    uri_path = url.split('/')[0..-2].join('/')
    ext = file.split('.').last
    file_without_ext = file.split('.')[0..-2].join('.')
    pos = data.index(s)
    output = data[0, pos]
    output << "<video controls>\n"
    extensions.each do |e|
      output << "  <source src='#{uri_path}/#{file_without_ext}.#{e}' type='video/#{e}'>\n"
    end
    output << data[(pos+s.size)..-1]
    File.open(fpath, "w") do |f|
      f.write output
    end
  end
end

namespace :sstic do
  desc 'prepare build'
  task :prebuild do
    Dir.mkdir 'images' unless Dir.exists? 'images'
    Dir.glob("../stage-*/**/rk_*.[jpgs][ipnv][gf]").each do |image|
      FileUtils.copy(image, "images/" + File.basename(image))
    end
  end

  desc 'build basic formats'
  task :build => :prebuild do
    puts "Converting to HTML ..."
    `bundle exec asciidoctor main.asc`
    add_video_format("main.html")
    puts " -- HTML output at main.html"

    puts "Converting to EPub..."
    #{}`bundle exec asciidoctor-epub3 main.asc`
    puts " -- Epub output at main.epub"

    puts "Converting to PDF ..."
    `bundle exec asciidoctor-pdf main.asc`
    puts " --PDF output at main.pdf"

    puts "Converting to Docbook ..."
    `bundle exec asciidoctor -b docbook  -a data-uri! main.asc`
    puts " --Docbook output at main.xml"
  end
end

task :default => "sstic:build"
