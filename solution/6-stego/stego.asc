
[[_stego_stage]]
== Stage 6 : stéganographie

=== congratulations.jpg

Le fichier obtenu à l'étape précédente est une archive au format `.tar.bz2` qui contient
une image `JPEG` :

[source,console]
----
$ sha256sum congratulations.tar.bz2
9128135129d2be652809f5a1d337211affad91ed5827474bf9bd7e285ecef321  congratulations.tar.bz2
$ tar jxvf congratulations.tar.bz2
congratulations.jpg
$ file congratulations.jpg
congratulations.jpg: JPEG image data, JFIF standard 1.01
$ ls -al congratulations.jpg
-rw-r--r-- 1 jpe jpe 252569 mars  23 10:34 congratulations.jpg
----

Le fichier `congratulations.jpg` correspond à l'image ci-dessous :

image::images/rk_congratulations.jpg[align='center']

A première vue, selon la commande `jpeginfo`, le fichier semble valide :

[source,console]
----
$ jpeginfo -c congratulations.jpg
congratulations.jpg  636 x 474  24bit JFIF  P  252569  [OK]
----

La taille du fichier est néanmoins suspecte (252569 octets), pour une image de cette
 dimension. En effet, en utilisant l'outil `hachoir`, on identifie une autre archive
 `.tar.bz2` à l'intérieur de l'image :

[source,console]
----
$ hachoir-subfile congratulations.jpg
[+] Start search on 252569 bytes (246.6 KB)

[+] File at 0 size=55248 (54.0 KB): JPEG picture
[+] File at 55248: bzip2 archive

[+] End of search -- offset=252569 (246.6 KB)
$ dd if=congratulations.jpg of=out.tar.bz2 bs=1 skip=55248 2>/dev/null
$ tar jxvf out.tar.bz2
congratulations.png
----

L'analyse du fichier `congratulations.png` constitue la seconde phase de cette étape.

=== congratulations.png

L'image obtenue est présentée ci-dessous :

image::images/rk_congratulations.png[align='center']

Elle est similaire au fichier `congratulations.jpg`, seul le message du bas a changé.
On peut alors tester l'intégrité du fichier avec la commande `pngcheck`, comme présenté
ci-dessous :

[source,console]
----
$ pngcheck -v congratulations.png
File: congratulations.png (197557 bytes)
  chunk IHDR at offset 0x0000c, length 13
    636 x 474 image, 32-bit RGB+alpha, non-interlaced
  chunk bKGD at offset 0x00025, length 6
    red = 0x00ff, green = 0x00ff, blue = 0x00ff
  chunk pHYs at offset 0x00037, length 9: 3543x3543 pixels/meter (90 dpi)
  chunk tIME at offset 0x0004c, length 7: 27 Feb 2015 13:40:19 UTC
  chunk sTic at offset 0x0005f, length 4919:  illegal reserved-bit-set chunk
ERRORS DETECTED in congratulations.png
----

Le fichier semble contenir un "chunk" de type `sTic`. Une rapide recherche sur
Internet permet de confirmer qu'il ne s'agit pas d'un type valide.

Le script Ruby ci-dessous permet de lister tous les types de "chunk" :

[source,ruby]
.list-chunks.rb
----
#!/usr/bin/env ruby

require 'chunky_png'

png_stream = ChunkyPNG::Datastream.from_file(ARGV.shift)
png_stream.each_chunk { |chunk| puts chunk.type }
----

Son exécution retourne le résultat suivant :

[source,console]
----
$ ./list-chunks.rb congratulations.png
IHDR
bKGD
pHYs
tIME
sTic
sTic
[...]
sTic
sTic
IDAT
IDAT
IDAT
IDAT
IDAT
IDAT
IDAT
IDAT
IEND
----

Une invite `irb` est alors utilisée pour examiner le fichier en mode interactif :

[source,irb]
----
$ irb
irb(main):001:0> require 'chunky_png'
 => true
irb(main):002:0> png_stream = ChunkyPNG::Datastream.from_file("congratulations.png")
irb(main):003:0> chunks = png_stream.chunks.select {|c| c.type == "sTic"}
irb(main):004:0> chunks.size
 => 28
irb(main):005:0> chunks.first
 => #<ChunkyPNG::Chunk::Generic:0x0000000280a910 @type="sTic", @content="x\x9C\x84[...]
----

Le fichier contient donc 28 chunks de type `sTic`. On peut alors s'intéresser aux données
contenues dans le premier chunk.

[source,irb]
----
irb(main):006:0> chunks[0].content[0, 4].unpack('H*')
 => ["789c84b6"]
----

Une recherche de `0x78 0x9c` sur Internet permet d'identifier un probable
début de stream Zlib. On peut alors tenter une décompression et sauvegarder le résulat.

[source,irb]
----
irb(main):007:0> data = chunks.map {|c| c.content}.join
irb(main):008:0> require 'zlib'
 => false
irb(main):009:0> File.open("out.bin", "wb") {|f| f.write Zlib::Inflate.inflate(data) }
 => 133048
irb(main):010:0> puts `file out.bin`
out.bin: bzip2 compressed data, block size = 900k
----

Le résultat obtenu est un fichier `bzip2` qui est en fait une archive `tar.bz2`
contenant une nouvelle image :

[source,console]
----
$ tar jxvf out.bin
congratulations.tiff
----

Cette image doit alors être analysée pour poursuivre le challenge.

=== congratulations.tiff

L'image obtenue est la suivante :

image::images/rk_congratulations_tiff.png[align='center']

L'outil `tiffinfo` permet d'obtenir des informations sur le fichier :

[source,console]
----
$ ls -al congratulations.tiff
-rw-r--r-- 1 jpe jpe 904520 mars  23 10:34 congratulations.tiff
$ tiffinfo -v congratulations.tiff
TIFF Directory at offset 0x8 (8)
  Image Width: 636 Image Length: 474
  Bits/Sample: 8
  Compression Scheme: None
  Photometric Interpretation: RGB color
  Samples/Pixel: 3
  Rows/Strip: 474
  Planar Configuration: single image plane
----

Sachant que 8 bits sont utilisés pour stocker un "sample", qu'un pixel nécessite 3
"samples" et que les dimensions de l'image sont `636 x 474`, il faut donc
`3 * 636 * 474 = 904392` octets pour stocker l'ensemble des pixels. Par rapport
à la taille totale du fichier (904520 octets), il ne reste plus que 128 octets
qui correspondent aux entêtes du fichier. Un rapide examen de ces
derniers, en utlisant par exemple le script <<_parse_tiff_rb>> disponible en
annexe, ne permet pas d'identifier de données cachées pouvant représenter
l'adresse email recherchée. Toutes les données du fichier étant alors utilisées
pour représenter l'image, il faut donc aller chercher ailleurs pour poursuivre
le challenge.

Une hypothèse intéressante est de supposer que la suite du challenge ne peut
être stockée que dans les informations décrivant chaque pixel. Une technique
stéganographique bien connue permet justement de réaliser cet objectif, en utilisant
les bits les moins significatifs (dits de poids faible) de chaque pixel pour
dissimuler de l'information.


L'outil https://github.com/apsdehal/ctf-tools[StegSolve @ *GitHub*], bien connu
des participants de CTF, est utile pour détecter l'utilisation de techniques
stéganographiques au sein d'une image. Il permet notamment de visualiser séparement
chaque bit des trois composantes RGB pour vérifier leur utilisation au
niveau de l'image.

TIP: StegSolve ne sait pas analyser directement une image au format TIFF mais une
conversion sans perte au format PNG (par exemple avec ImageMagick)
conserve le codage des pixels.

L'examen de la composante rouge met en évidence une anomalie au niveau
du bit 0 :

image::images/rk_stegsolve_red0.png[align='center']

De la même manière, le bit 0 de la composante verte semble être
utilisé pour stocker des données :

image::images/rk_stegsolve_green0.png[align='center']

Ces données sont finalement extraites à l'aide de la fonctionnalité
"`Data Extract`" de StegSolve, en sélectionnant les bits 0 des composantes
vertes et rouges. On peut alors reconnaitre un entête d'une
archive `bzip2`, comme présenté ci-dessous :

image::images/rk_stegsolve_data.png[align='center']

Il ne reste plus alors qu'à sauvegarder le résultat pour poursuivre le
challenge.

=== congratulations.gif

Le fichier obtenu à la phase précédente est une archive `tar.bz2` contenant
une nouvelle image à analyser, `congratulations.gif`.

[source,console]
----
$ tar jxvf step4.bz2

bzip2: (stdin): trailing garbage after EOF ignored
congratulations.gif
----

Cette image est présentée ci-dessous :

image::images/rk_congratulations_gif.png[align='center']

On peut alors profiter que StegSolve soit toujours lancé pour charger l'image
obtenue et l'analyser.

La fonctionnalité "`Random colour map`" affiche finalement l'adresse
email de validation, comme présenté ci-dessous :

image::images/rk_stegsolve_random.png[align='center']

En plissant les yeux et en faisant attention, on arrive enfin à recopier
l'adresse de validation qui est : `1713e7c1d0b750ccd4e002bb957aa799@challenge.sstic.org`
