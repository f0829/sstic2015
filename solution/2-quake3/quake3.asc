[[_quake3]]
== Quake 3

Le fichier `memo.txt` de l'archive `stage2.zip` est le suivant :

[source, console]
----
$ cat memo.txt
Cipher: AES-OFB
IV: 0x5353544943323031352d537461676532
Key: Damn... I ALWAYS forget it. Fortunately I found a way to hide it into my favorite game !

SHA256: 91d0a6f55cce427132fc638b6beecf105c2cb0c817a4b7846ddb04e3132ea945 - encrypted
SHA256: 845f8b000f70597cf55720350454f6f3af3420d8d038bb14ce74d6f4ac5b9187 - decrypted
----

Ce mémo nous donne des informations sur le mode de chiffrement, le vecteur
d'initialisation utilisée et quelques indications sur la clé : celle-ci
semble cachée dans un jeu.

Le fichier `sstic.pk3`, également présent dans l'archive `stage2.zip`, est en fait
une carte pour le jeu Quake 3 Arena. En chargeant la carte et en explorant les
lieux, on aperçoit certaines textures contenant des données hexadécimales. On suppose
à ce stade qu'il s'agit de morceaux de la clé à reconstituer.

La vidéo ci-dessous présente un parcours dans la carte permettant de retrouver
l'ensemble de ces textures :

//video::https://docs.google.com/uc?authuser=0&id=0B7bHIVi7bS6lbkIyYmJOSjZOLW8&export=download[align='center']

//video::2-quake3/output.webm[align='center']

//video::d3r6UTvH9hQ[youtube]

Ces textures, extraites depuis le fichier `sstic.pk3` sont présentées ci-dessous
dans leur ordre de découverte :

image:images/rk_montage.png[align='center']

Enfin, la pièce finale après le rocket jump affiche la séquence à utiliser pour obtenir
la clé finale :

WARNING: mettre une capture d'écran de la pièce

Une fois la clé identifiée, le déchiffrement peut être réalisé par le script
suivant :

[source, ruby]
----
#!/usr/bin/env ruby

require 'openssl'
require 'digest'

def hex_to_bin(s)
  s.scan(/../).map {|x| x.to_i(16)}.pack('C*')
end

iv = "5353544943323031352d537461676532"
key  = "9e2f31f7" # flag green
key << "8153296b" # pulse white
key << "3d9b0ba6" # loc orange
key << "7695dc7c" # drop white
key << "b0daf152" # flag orange
key << "b54cdc34" # link green
key << "ffe0d355" # wifi green
key << "26609fac" # pc white

encrypted_data = File.open("input/encrypted", "rb").read
encrypted_sha256 = Digest::SHA256.hexdigest(encrypted_data)

raise unless encrypted_sha256 == "91d0a6f55cce427132fc638b6beecf105c2cb0c817a4b7846ddb04e3132ea945"

cipher = OpenSSL::Cipher.new('aes-256-ofb')
cipher.decrypt
cipher.key = hex_to_bin(key)
cipher.iv = hex_to_bin(iv)

plain = cipher.update(encrypted_data) + cipher.final

File.open("decrypted", "wb") do |f|
   f.write plain
end
----

Etrangement, l'empreinte sha256 du fichier obtenu ne correspond pas à celle
mentionnée dans le fichier `memo.txt`

[source, console]
----
$ sha256sum decrypted
f9ca4432afe87cbb1fca914e35ce69708c6bfa360b82bff21503b6723d1cfbf0  decrypted
----

Cependant, en observant la fin du fichier, on constate la présence de données de
bourrage :

[source, console]
----
$ hexdump -C decrypted| tail -n 4
0007a4e0  00 70 61 69 6e 74 2e 63  61 70 50 4b 05 06 00 00  |.paint.capPK....|
0007a4f0  00 00 03 00 03 00 a4 00  00 00 46 a4 07 00 00 00  |..........F.....|
0007a500  10 10 10 10 10 10 10 10  10 10 10 10 10 10 10 10  |................|
0007a510
----

En supprimant les 16 derniers octets, on retrouve la bonne empreinte :

[source, console]
----
$ dd if=decrypted bs=1 count=$(( $(stat -c %s decrypted)  - 16)) | sha256sum -
500992+0 records in
500992+0 records out
500992 bytes (501 kB) copied, 0.520727 s, 962 kB/s
845f8b000f70597cf55720350454f6f3af3420d8d038bb14ce74d6f4ac5b9187  -
----

L'archive obtenue peut alors être testée pour en découvrir le contenu :

[source, console]
----
$ unzip -t decrypted
Archive:  decrypted
    testing: encrypted                OK
    testing: memo.txt                 OK
    testing: paint.cap                OK
No errors detected in compressed data of decrypted.
----

L'étude de ces fichiers fait l'objet de l'étape suivante du challenge.
