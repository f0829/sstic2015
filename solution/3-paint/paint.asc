
== Paint

Le fichier `memo.txt` obtenu à l'étape précédente contient les informations
suivantes :

[source, console]
----
# cat memo.txt
Cipher: Serpent-1-CBC-With-CTS
IV: 0x5353544943323031352d537461676533
Key: Well, definitely can't remember it... So this time I securely stored it with Paint.

SHA256: 6b39ac2220e703a48b3de1e8365d9075297c0750e9e4302fc3492f98bdf3a0b0 - encrypted
SHA256: 7beabe40888fbbf3f8ff8f4ee826bb371c596dd0cebe0796d2dae9f9868dd2d2 - decrypted
----

Cette fois-ci, la clé de déchiffrement semble avoir été stockée avec le logiciel
Paint, ce qui est plutôt original. L'archive contient également un fichier
`paint.cap` qu'il est possible d'ouvrir avec Wireshark, comme présenté ci-dessous :

image::images/rk_paint_cap.png[align='center']

Il s'agit d'une capture d'une trace USB dans laquelle on distingue trois types
de messages :

* des requêtes de type "`Request DEVICE`" pour énumérer les périphériques ;
* des réponses "`Response DEVICE`" aux précédentes requêtes ;
* enfin des messages de type "`URB_INTERRUPT`".

Au niveau des périphériques découverts, on retrouve en particulier une souris
USB :

image::images/rk_mouse_cap.png[align='center']

Le reste de la capture est une série de messages "`URB_INTERRUPT`" tel que celui
présenté ci-dessous :

image::images/rk_urb_cap.png[align='center']

Certaines données ("`Leftover Capture Data`") ne sont pas décodées par Wireshark,
faute de pouvoir les interpréter correctement.

La lecture du fichier http://lxr.free-electrons.com/source/drivers/hid/usbhid/usbmouse.c#L81[`usbmouse.c`],
responsable du support des souris USB dans le noyau Linux, permet de comprendre le format
de ces données :

[source, c]
----
input_report_key(dev, BTN_LEFT,   data[0] & 0x01);
input_report_key(dev, BTN_RIGHT,  data[0] & 0x02);
input_report_key(dev, BTN_MIDDLE, data[0] & 0x04);
input_report_key(dev, BTN_SIDE,   data[0] & 0x08);
input_report_key(dev, BTN_EXTRA,  data[0] & 0x10);

input_report_rel(dev, REL_X,     data[1]);
input_report_rel(dev, REL_Y,     data[2]);
input_report_rel(dev, REL_WHEEL, data[3]);
----

Le premier octet contient l'état des différents boutons de la souris, les octets
deux et trois représentent le déplacement de la souris sur les axes X et Y et
le dernier octet correspond au déplacement de la roulette.

L'analyse de la trace permet donc de reconstituer tous les déplacements de la souris
ainsi que les clics effectués. On peut donc ainsi espérer retrouver le dessin
réalisé sous Paint, en associant à chaque clic un pixel.

Le script Ruby ci-dessous exploite les informations des interruptions pour
récupérer les coordonnées de chaque clic et construire l'image correspondante :

[source, ruby]
----
#!/usr/bin/env ruby

require 'sdl'

clicks = []
x, y = 0, 0
min_x, max_x, min_y, max_y = 0, 0, 0, 0

IO.popen("tshark -r input/paint.cap -V").each_line do |line|
  next unless line =~ /Leftover Capture Data: (.{8})/
  data = $1.scan(/../).map {|x| x.to_i(16)}.pack('C*').unpack('c*')

  buttons, x_dep, y_dep, dev_spec = *data

  x += x_dep if x_dep != 0
  y += y_dep if y_dep != 0

  min_x = x if x < min_x
  max_x = x if x > max_x
  min_y = y if y < min_y
  max_y = y if y > max_y

  [ 0, 1, 2 ].each do |bit|
    if ((buttons >> bit) & 1) == 1 then
      clicks << [x, y]
    end
  end
end

extra_space = 128
width = (max_x - min_x) + extra_space
height = (max_y - min_y) + extra_space

SDL.init(SDL::INIT_VIDEO)
screen = SDL::Screen.open(width, height,16,SDL::HWSURFACE)

white = screen.format.map_rgb(255, 255, 255)
black = screen.format.map_rgb(0, 0, 0)
screen.fill_rect(0, 0, width, height, white)

clicks.each do |x, y|
  screen.put_pixel(x - min_x + extra_space / 2,
                   y - min_y + extra_space / 2,
                   black)
end

screen.flip
sleep(2)
screen.save_bmp("screen.bmp")
----

Le résultat obtenu est le suivant :

image::images/rk_trim.png[align='center']

Pour obtenir la clé de déchiffrement, il faut donc calculer
l'empreinte de la chaîne "`The quick brown fox jumps over
the lobster dog`" (référence au challenge SSTIC 2011) à l'aide
de l'algorithme Blake256.

Cet algorithme étant récent, il n'est pas implémenté dans les
bibliothèques classiques telles qu'OpenSSL. Il faut donc télécharger
puis compiler l'implémentation de référence à l'adresse
https://131002.net/blake/blake_c.tar.gz .

[source, console]
---
$ wget https://131002.net/blake/blake_c.tar.gz
$ tar xvf blake_c.tar.gz
blake/
blake/blake256.c
blake/blake384.c
blake/blake224.c
blake/README
blake/blake.h
blake/Makefile
blake/blake512.c
blake/astyle-clean.sh
$ cd blake
$ make
make
cc -Wall -O3 -fomit-frame-pointer    blake224.c   -o blake224
cc -Wall -O3 -fomit-frame-pointer    blake256.c   -o blake256
cc -Wall -O3 -fomit-frame-pointer    blake384.c   -o blake384
cc -Wall -O3 -fomit-frame-pointer    blake512.c   -o blake512
Checking test vectors
./blake224
./blake256
./blake384
./blake512
$ echo -n "The quick brown fox jumps over the lobster dog" > key
$ ./blake256 key
66c1ba5e8ca29a8ab6c105a9be9e75fe0ba07997a839ffeae9700b00b7269c8d key
---

Il ne reste plus qu'à déchiffrer le fichier `encrytped` à l'aide des informations
contenues dans le mémo, à savoir l'algorithme de chiffrement et le mode
(Serpent-1-CBC-With-CTS) ainsi que le vecteur d'initialisation.

Le script Ruby ci-dessous réalise l'opération de déchiffrement, en se basant
sur les bindings à la bibliothèque CryptoPP :

[source, ruby]
----
#!/usr/bin/env ruby

require 'cryptopp'

IV = "5353544943323031352d537461676533"
KEY = "66c1ba5e8ca29a8ab6c105a9be9e75fe0ba07997a839ffeae9700b00b7269c8d"

inputfile, outputfile = ARGV.shift, ARGV.shift

serpent = CryptoPP::Serpent.new
serpent.block_mode = :cbc_cts
serpent.iv_hex = IV
serpent.key_hex = KEY

File.open(inputfile, "rb") do |fi|
  File.open(outputfile, "wb") do |fo|
    serpent.decrypt_io fi, fo
  end
end
----

Le lancement du script permet de récupérer les données en clair :

[source, console]
----
$ ./decrypt.rb input/encrypted input/decrypted
$ sha256sum input/decrypted
7beabe40888fbbf3f8ff8f4ee826bb371c596dd0cebe0796d2dae9f9868dd2d2  input/decrypted
$ file input/decrypted
input/decrypted: Zip archive data, at least v2.0 to extract
$ unzip -t input/decrypted
Archive:  input/decrypted
    testing: stage4.html              OK
No errors detected in compressed data of input/decrypted.
----

L'empreinte sha256 est correcte et le fichier obtenu est une archive zip
contenant un fichier HTML qui sera analysé dans l'étape suivante.
