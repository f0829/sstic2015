[[_rubberducky]]
== Analyse de la carte mémoire

Le fichier http://static.sstic.org/challenge2015/challenge.zip[challenge.zip]
téléchargé sur la page du challenge contient une image de carte SD, comme
présenté ci-dessous :

[source, console]
----
$ wget http://static.sstic.org/challenge2015/challenge.zip
$ unzip challenge.zip
Archive:  challenge.zip
  inflating: sdcard.img
$ file sdcard.img
sdcard.img: DOS/MBR boot sector
----

Cette image peut être montée en loopback pour en examiner le contenu :

[source, console]
----
$ sudo mount -o loop sdcard.img /mnt/loop
$ ls -al /mnt/loop
total 33472
drwxr-xr-x 2 root root    16384 janv.  1  1970 .
drwxr-xr-x 7 root root     4096 avril  3 19:54 ..
-rwxr-xr-x 1 root root 34253730 mars  26 02:49 inject.bin
----

Un rapide examen du fichier `inject.bin` ne relève rien de particulier :

[source, console]
----
$ file /mnt/loop/inject.bin
/mnt/loop/inject.bin: data
$ strings /mnt/loop/inject.bin | wc -l
0
----

Par contre, la commande `strings` appelée directement sur le fichier image
retourne deux chaînes intéressantes :

[source, console]
----
$ strings sdcard.img|tail -n 2
INJECT  BIN
java -jar encoder.jar -i /tmp/duckyscript.txt
----

Le nom du fichier `duckyscript.txt` fait penser au
http://hakshop.myshopify.com/products/usb-rubber-ducky-deluxe[Rubber Ducky],
outil bien connu des pen-testers.

Un "`Rubber Ducky`" est une clé USB permettant de lancer un code exécutable
sur le poste de la victime au moment de l'insertion de la clé, selon le principe
suivant :

* la clé USB émule un périphérique de type clavier
* ce périphérique va simuler des frappes au clavier pour exécuter un script
de décodage permettant de reconstituer la charge binaire finale
(généralement un exécutable Windows)
* enfin, la charge finale est déclenchée

kikoo
