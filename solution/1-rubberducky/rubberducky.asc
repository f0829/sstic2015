[[_rubberducky]]
== Stage 1 : carte mémoire

Le fichier http://static.sstic.org/challenge2015/challenge.zip[challenge.zip]
téléchargé sur la page du challenge contient une image de carte SD, comme
présenté ci-dessous :

[source, console]
----
$ wget http://static.sstic.org/challenge2015/challenge.zip
$ unzip challenge.zip
Archive:  challenge.zip
  inflating: sdcard.img
$ file sdcard.img
sdcard.img: DOS/MBR boot sector
----

Cette image peut être montée en loopback pour en examiner le contenu :

[source, console]
----
$ sudo mount -o loop sdcard.img /mnt/loop
$ ls -al /mnt/loop
total 33472
drwxr-xr-x 2 root root    16384 janv.  1  1970 .
drwxr-xr-x 7 root root     4096 avril  3 19:54 ..
-rwxr-xr-x 1 root root 34253730 mars  26 02:49 inject.bin
----

Un rapide examen du fichier `inject.bin` ne relève rien de particulier :

[source, console]
----
$ file /mnt/loop/inject.bin
/mnt/loop/inject.bin: data
$ strings /mnt/loop/inject.bin | wc -l
0
----

Par contre, la commande `strings` appelée directement sur l'image
retourne deux chaînes intéressantes :

[source, console]
----
$ strings sdcard.img|tail -n 2
INJECT  BIN
java -jar encoder.jar -i /tmp/duckyscript.txt
----

Le nom du fichier `duckyscript.txt` fait penser au
http://hakshop.myshopify.com/products/usb-rubber-ducky-deluxe[Rubber Ducky],
outil bien connu des https://twitter.com/pentesteur[pentesteurs].

image::images/rubberducky.jpeg[title='Rubber Ducky', align='center']

Un "`Rubber Ducky`" est une clé USB permettant de lancer un code exécutable
sur le poste d'une victime, selon le principe suivant :

* la clé USB est connectée à l'ordinateur ;
* elle émule un périphérique de type clavier ;
* ce périphérique va simuler des frappes au clavier pour exécuter un script
de décodage permettant de reconstituer la charge binaire finale
(généralement un exécutable Windows) ;
* enfin, la charge finale est déclenchée sur le poste de la victime.

La séquence de frappes clavier à simuler est décrite dans un fichier au format
https://github.com/hak5darren/USB-Rubber-Ducky/wiki/Duckyscript["`Ducky Script`"].
Ce fichier est ensuite compilé avec l'outil `duckendoder` pour produire un fichier
binaire `input.bin` : au moment de la connexion de la clé USB,
le micro-contrôleur ira lire le contenu de ce fichier pour démarrer l'attaque.

L'objectif à ce stade est de pouvoir retrouver le code source du script à partir
du fichier `input.bin` présent sur la carte SD. Heureusement, l'outil
https://code.google.com/p/ducky-decode/source/browse/trunk/ducky-decode.pl?r=6[`ducky-decode.pl`]
permet justement de réaliser cette opération.

Le lancement de ce script sur notre fichier `input.bin` retourne le résultat
 suivant :

[source, console]
----
$ ./ducky-decode.pl -f /mnt/loop/inject.bin
00ff 007d
GUI R

DELAY 500

ENTER

DELAY 1000
 c m d
ENTER

DELAY 50
 p o w e r s h e l l
SPACE
 - e n c
SPACE
 Z g B 1 [...] D s A f Q A = 00a0
ENTER
 p o w e r s h e l l
SPACE
 - e n c
SPACE
 Z g B 1 [...] D s A f Q A = 00a0
 [...]
----

La signification du paramètre `-enc` de `powershell` est détaillée sur la page
https://technet.microsoft.com/fr-fr/library/hh847736.aspx : il permet
de passer des commandes à exécuter codées en base64. La valeur `00a0` correspond
à un opcode Ducky Script inconnu de `ducky-decode.pl` et donc non décodé.

On peut donc tenter d'extraire la chaîne passée en paramètre puis la décoder
avec la commande `base64` :

[source, console]
----
$ ./ducky-decode.pl -f /tmp/inject.bin | grep "Z g" | head -n 1 |  sed 's/\(\s\|00a0\)//g' | base64 -d
function write_file_bytes{param([Byte[]] $file_bytes, [string] $file_path = ".\stage2.zip");$f = [io.file]::OpenWrite($file_path);$f.Seek($f.Length,0);$f.Write($file_bytes,0,$file_bytes.Length);$f.Close();}function check_correct_environment{$e=[Environment]::CurrentDirectory.split("\");$e=$e[$e.Length-1]+[Environment]::UserName;$e -eq "challenge2015sstic";}if(check_correct_environment){write_file_bytes([Convert]::FromBase64String('UEsDBAoDAAAAADaK[...]8AJFW2UwdXtOh6gUsBzWnXw=='));}else{write_file_bytes([Convert]::FromBase64String('VAByAHkASABhAHIAZABlAHIA'));}
----

Comme anticipé, on obtient alors une série d'instructions Powershell qui réalisent
les opérations suivantes :

* définition d'une fonction `write_file_bytes` qui écrit les données `$file_bytes` à la fin
du fichier spécifié par `$file_path` (`stage2.zip` par défaut);
* définition d'une fonction `check_correct_environment` qui teste si le nom
de l'utilisateur courant est bien `challenge2015sstic` ;
* en fonction du résultat de l'appel à `check_correct_environment`, appel de la fonction
`write_file_bytes` avec :
** une longue chaîne de caractères en base64 si le résultat est positif,
** la chaîne `"VAByAHkASABhAHIAZABlAHIA"` ("`Try harder`") sinon.

Pour reconstruire le fichier `stage2.zip`, il ne reste plus qu'à extraire les
données des instructions Powershell, les décoder puis écrire le résultat
binaire dans le fichier de sortie. Le script Ruby ci-dessous réalise ces opérations :

[source, ruby]
----
#!/usr/bin/env ruby
# encoding: UTF-8

require 'base64'

input = ARGV.shift

File.open("stage2.zip", "wb") do |fo|
  IO.popen("./ducky-decode.pl -f #{input}").each_line do |line|
    next unless line =~ /^ Z/ # <1>
    s = line.gsub(/( |00a0)/, '').strip # <2>
    t = Base64.decode64(s).force_encoding("UTF-16LE").encode("UTF-8") # <3>
    if t =~ /FromBase64String\('([^']+)'\)/
      fo.write Base64.decode64($1) # <4>
    end
  end
end
----
<1> teste si la ligne commence par " Z"
<2> suppression des espaces et opcode non décodé
<3> conversion d'UTF-16LE vers UTF-8
<4> extraction des données de `stage2.zip` et écriture dans le fichier de sortie

Le fichier obtenu peut alors être testé :

[source, console]
----
$ md5sum stage2.zip
979ff7961addd9ce982ff51fe2a0a058  stage2.zip
$ unzip -t stage2.zip
Archive:  stage2.zip
    testing: encrypted                OK
    testing: memo.txt                 OK
    testing: sstic.pk3                OK
No errors detected in compressed data of stage2.zip.
----

L'analyse de cette archive constitue la seconde étape de ce challenge.
