
== Stage 5 : ST20

=== Découverte

L'archive obtenue suite à la résolution de l'étape précédente contient deux fichiers, `input.bin` et
`schematic.pdf`.

D'après le résultat de la commande `file`, le fichier `input.bin` ne correspond
pas à un format connu. Cependant, il contient quelques chaînes de caractères
intéressantes, comme présenté ci-dessous :

[source, console]
----
$ file input.bin
input.bin: data
$ strings input.bin
$ P#
$z$y
Boot ok
Code Ok
Decrypt
$ P#
[...]
a       qC$
 e         |
KEY:
congratulations.tar.bz2
[...]
----

Le fichier `schematic.pdf` correspond à l'image ci-dessous :

image::images/rk_schematic.svg[align='center', title='schematic.pdf']

Plusieurs informations intéressantes sont sur ce schéma :

* on y découvre la notion de http://en.wikipedia.org/wiki/Transputer["`transputer`"]
qui est une architecture matérielle particulière conçue pour effectuer des calculs en parallèle ;
* le vecteur de test fourni permet de déduire qu'il s'agit d'une implémentation d'un
algorithme de déchiffrement ;
* enfin, toujours au niveau de ce même vecteur de test, la chaîne déchiffrée mentionne une architecture
 dite "`ST20`".

La section http://en.wikipedia.org/wiki/Transputer#Design[Design] de la page Wikipedia sur les
transputers explique les grands principes de cette architecture matérielle. En particulier,
un transputer est capable de communiquer avec d'autres transputers à l'aide d'un lien série. De plus,
un transputer peut démarrer de façon classique à l'aide d'une ROM ou de façon plus originale
en utilisant un lien série. Le schéma fourni laisse penser que le transputer 0 démarre
de cette façon, en lisant les données du fichier `input.bin` avec un lien série.

La http://pdf.datasheetcatalog.com/datasheet/stmicroelectronics/4942.pdf[documentation] disponible
sur le processeur ST20 détaille ce mode de démarrage :

"When booting from a link, the ST20-GP1 will wait for the first bootstrap message to arrive on the
link. The first byte received down the link is the control byte. If the control byte is greater than 1 (i.e.
2 to 255), it is taken as the length in bytes of the boot code to be loaded down the link. The bytes
following the control byte are then placed in internal memory starting at location MemStart.
Following reception of the last byte the ST20-GP1 will start executing code at MemStart. The
memory space immediately above the loaded code is used as work space. A byte arriving on the
bootstrapping link after the last bootstrap byte, is retained and no acknowledge is sent until a
process inputs from the link."
-- ST20-GP1 datasheet

Pour comprendre la routine de déchiffrement implémentée au sein du fichier `input.bin`,
il va être nécessaire de désassembler les données correspondant au programme puis
de les analyser pour retrouver l'algorithme. Fort heureusement, un désassembleur
pour le processeur ST20 est disponible sur Internet : http://digifusion.jeamland.org/st20dis[st20dis].

De plus, l'identification sur Internet d'un
http://pdf.datasheetcatalog.com/datasheet/SGSThomsonMicroelectronics/mXruvtu.pdf[manuel] sur
le jeu d'instruction du processeur aide à interpréter la sortie du désassembleur.

=== Rétro-conception

Pour commencer, le premier réflexe est alors de lancer `st20dis` sur le fichier `input.bin` en commençant
à désassembler à l'octet 0 :

[source, console]
----
$ ./st20dis-linux -A input.bin
; New subroutine 0+1; References: 0, Local Vars: 0
00000000: f8                    sub_0:        prod             ; product - A = A * B (no overflow check)

; New subroutine 1+d; References: 0, Local Vars: 76
00000001: 64 b4                 sub_1:        ajw #-4c         ; adjust workspace - Move workspace pointer
00000003: 40                                  ldc #0           ; load constant - A = n, B=A, C=B
00000004: d1                                  stl #1 [var_1]   ; store local - workspace[n] = A, A=B, B=C
00000005: 40                                  ldc #0           ; load constant - A = n, B=A, C=B
00000006: d3                                  stl #3 [var_3]   ; store local - workspace[n] = A, A=B, B=C
00000007: 24 f2                               mint             ; minimum integer - A = MostNeg
00000009: 24 20 50                            ldnlp #400       ; load non-local pointer - A = &A[n]
0000000c: 23 fc                               gajw             ; general adjust workspace - Wptr <=> A

; New subroutine e+f8; References: 0, Local Vars: 76
0000000e: 64 b4                 sub_e:        ajw #-4c         ; adjust workspace - Move workspace pointer
00000010: 2c 49                               ldc #c9          ; load constant - A = n, B=A, C=B
00000012: 21 fb                               ldpi [str_dd]    ; Load pointer to instruction - A = next instruction + A
00000014: 24 f2                               mint             ; minimum integer - A = MostNeg
[...]
----

Le désassembleur a l'air de fonctionner correctement et la sortie semble cohérente.
Cependant, la toute première instruction semble étrange. Le registre `A`
est mis à jour avec le résultat de la multiplication entre les registres `A`
et `B` sachant que, d'après la documentation, tous les registres sont dans un
état indéfini. En réalité, le premier octet du fichier (`0xf8`) correspond
à la valeur "`control byte`" qui spécifie, lors d'un démarrage via un lien série,
la quantité de données qui sera placée dans la mémoire du processeur pour être
executée.

Le code du démarrage du premier transputer est alors extrait avec les commandes
 ci-dessous :

[source, console]
----
$ dd if=input/input.bin count=1 bs=1 | xxd -
0000000: f8 <1>
$ dd if=input/input.bin bs=1 skip=1 count=$((0xf8)) of=t0.bin
----
<1> valeur du control byte

Le désassembleur `st20dis` est alors appelé sur le fichier `t0.bin` résultat
pour enfin obtenir le fichier <<_t0_asm>>.

=== Détermination de la clé

Maintenant que l'algorithme de la routine déchiffrement est globalement compris,
il reste à déterminer la clé valide permettant de déchiffrer les données
embarquées dans le fichier `input.bin`. La démarche initiale est la suivante :

* recoder une implémentation, si possible rapide, de la routine de déchiffrement ;
* vérifier que l'implémentation passe le vecteur de test ;
* déterminer une liste de clés candidates et, pour chacune, :
** effectuer un déchiffrement,
** calculer l'empreinte SHA256 des données obtenues et comparer le résultat
avec l'empreinte `decrypted` présente sur le schéma `schematic.pdf`.

Si les deux empreintes sont identiques, alors la clé candidate courante est celle
recherchée.

Cette approche se heurte cependant à plusieurs difficultés :

* sachant que la longueur de la clé est de 12 octets, soit 96 bits,
l'espace de clés à tester est gigantesque (stem:[2^96] clés différentes) ;
* l'algorithme de déchiffrement n'est pas particulièrement efficace car il agit
octet par octet sur les données chiffrées : le test d'une clé est en conséquence
assez long.

Pour poursuivre, ces deux difficultés doivent être résolues. Au niveau du nombre de clés à tester,
il est possible de fortement réduire leur nombre. En effet, si on reprend l'algorithme
de déchiffrement, on peut se rendre compte que les 12 premiers octets déchiffrés
sont directement corrélés avec la clé par la formule suivante :

[stem]
++++
p_i = c_i \oplus ( (2 * k_i + i) % 256 )
++++

où stem:[p_i] est l'octet déchiffré, stem:[c_i] l'octet chiffré et stem:[k_i] l'octet
de clé à la position stem:[i], pour stem:[i in [0, 11]]. L'opération modulo 256
est nécessaire car le résultat est stocké dans octet (soit un entier de 8 bits).

La formule précédente revient à dire qu'il existe un entier stem:[n] tel que :

[stem]
++++
256 * n + c_i \oplus p_i = 2 * k_i + i
++++

Un octet de clé est donc corrélé avec les octets de clair et chiffré correspondants
de la façon suivante :

[stem]
++++
k_i = (256 * n + c_i \oplus p_i - i) / 2 = 128 * n + (c_i \oplus p_i - i) / 2
++++

Par conséquent, en identifiant un clair connu sur le début du fichier, on pourra
alors réduire grandement l'espace des clés à tester. On peut alors faire l'hypothèse,
 à cause de la présence de la chaîne `congratulations.tar.bz2` dans le fichier `input.bin`,
que les données déchiffrées correspondant à une archive au standard bzip2.

La page Wikipedia sur bzip2 décrit le http://en.wikipedia.org/wiki/Bzip2#File_format[format] d'un
fichier bzip2. On identifie alors certaines valeurs constantes au début du fichier :

[source]
----
.magic:16                       = 'BZ' signature/magic number
.version:8                      = 'h' for Bzip2 ('H'uffman coding), '0' for Bzip1 (deprecated)
.hundred_k_blocksize:8          = '1'..'9' block-size 100 kB-900 kB (uncompressed)

.compressed_magic:48            = 0x314159265359 (BCD (pi))
.crc:32                         = checksum for this block
----

Il s'agit donc de :

* `BZh` pour les trois premiers octets ;
* une valeur comprise entre 1 et 9 pour le quatrième octet ;
* enfin la valeur de Pi pour les 6 octets suivants.

Les 10 premiers octets sont donc prévisibles et permettent de limiter les clés
candidates. Pour cela, un script Ruby a été développé qui détermine, pour les 10
premiers octets, les valeurs possibles d'un octet de clé en fonction de l'octet
de clair connu et de l'octet chiffré correspondants.

[source, ruby]
.find-key.rb
----
include::../../stage-5/find-key.rb[]
----

Le script génère un fichier `.h` contenant 5120 clés qui peut alors être inclus dans un programme en
C pour effectuer l'attaque par force brute.

[source, console]
----
$ ./find-key.rb
#define KEYS_COUNT 5120

char keys[KEYS_COUNT][12] = {
    { 0x5e, 0x54, 0x1b, 0x75, 0x56, 0x7c, 0x64, 0x7d, 0x69, 0x76, 0x00, 0x00 },
    { 0x5e, 0x54, 0x1b, 0x75, 0x56, 0x7c, 0x64, 0x7d, 0x69, 0xf6, 0x00, 0x00 },
    { 0x5e, 0x54, 0x1b, 0x75, 0x56, 0x7c, 0x64, 0x7d, 0xe9, 0x76, 0x00, 0x00 },
    { 0x5e, 0x54, 0x1b, 0x75, 0x56, 0x7c, 0x64, 0x7d, 0xe9, 0xf6, 0x00, 0x00 },
    { 0x5e, 0x54, 0x1b, 0x75, 0x56, 0x7c, 0x64, 0xfd, 0x69, 0x76, 0x00, 0x00 },
    { 0x5e, 0x54, 0x1b, 0x75, 0x56, 0x7c, 0x64, 0xfd, 0x69, 0xf6, 0x00, 0x00 },
    { 0x5e, 0x54, 0x1b, 0x75, 0x56, 0x7c, 0x64, 0xfd, 0xe9, 0x76, 0x00, 0x00 },
[...]
----

Les deux derniers octets doivent être déterminés par force brute, ce qui revient
à un espace de clés correspondant à stem:[5120 * 2^8 * 2^8 = 5120 * 2^16] possibilités.

La seconde difficulté réside dans la lenteur de l'algorithme qui limite
les possibilités d'attaque par force brute. Pour contourner cette difficulté,
l'idéal serait de pouvoir éliminer les mauvaises clés candidates sans avoir
à déchiffrer l'intégralité des données. S'il est possible de déterminer un clair connu
dans le début du fichier déchiffré (autre que les 10 premiers octets), alors une
vérification sur le début des données déchiffrées permettrait de ne retenir que les
bons candidats. Si une clé candidate passe ce premier filtre, alors un déchiffrement
complet est ensuite réalisé pour comparer les empreintes SHA256.

Un fichier au format bzip2, de taille comparable à celui recherché, est alors
généré pour tenter d'identifier un clair connu :

[source, console]
----
$ dd if=/dev/urandom of=test.bin bs=256K count=1
1+0 records in
1+0 records out
262144 bytes (262 kB) copied, 0.0222051 s, 11.8 MB/s
$ bzip2 test.bin
$ hexdump -C test.bin.bz2
00000000  42 5a 68 39 31 41 59 26  53 59 48 b3 90 17 00 32  |BZh91AY&SYH....2|
00000010  78 ff ff ff ff ff ff ff  ff ff ff ff ff ff ff ff  |x...............|
00000020  ff ff ff ff ff ff ff ff  ff ff ff ff ff ff ff ff  |................|
[...]
----

On remarque que le début du fichier contient de nombreuses occurences de la valeur `0xff`. L'heuristique
retenue consiste alors à tester la présence des octets `ff ff ff ff` dans les
32 premiers octets déchiffrés.

Le programme <<_recode_c>> disponible en annexe implémente l'attaque par force
brute et permet de retrouver la clé valide en l'espace d'une minute :

[source, console]
----
$ make clean && make recode
rm recode keys.h
./find-key.rb > keys.h
gcc -O3 -march=native -fomit-frame-pointer -fopenmp -funroll-loops -Wall -o recode recode.c -lcrypto
$ dd if=input.bin bs=1 skip=$((0x9ad)) count=$((0x3dc9a-0x9ad+1)) of=encrypted.bin
250606+0 records in
250606+0 records out
250606 bytes (251 kB) copied, 0.333976 s, 750 kB/s
$ sha256sum encrypted.bin
a5790b4427bc13e4f4e9f524c684809ce96cd2f724e29d94dc999ec25e166a81  encrypted.bin
$ ./recode encrypted.bin
[+] self-test passed
[+] starting 4 threads
[+] testing 5120 keys
[!] key = 5ed49b7156fce47de976dac5
[+] result saved in congratulations.tar.bz2
----

La clé a finalement été identifée (`5ed49b7156fce47de976dac5`) et le résultat est sauvegardé dans le fichier
`congratulations.tar.bz2`.
