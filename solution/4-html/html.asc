
== Stage 4 : JavaScript

Le chargement du fichier `stage4.html` obtenu précédemment dans un navigateur
donne le résultat suivant :

image::images/rk_stage4_1.png[align='center']

Pour comprendre la raison de l'erreur, on est alors tenté de regarder le code source
de la page. Le corps du fichier est uniquement constitué de code JavaScript
qui commence par l'initialisation d'une variable `data` :

image::images/rk_stage4_2.png[align='center']

Ensuite, le script définit une seconde variable `hash` puis exécute une série
d'instructions JavaScript obfusquées :

image::images/rk_stage4_3.png[align='center']

Le premier réflexe est d'essayer de réindenter le fichier pour faciliter sa
lisibilité. Pour cela, on passe en mode hipster moustachu en installant Node.js et l'outil
https://github.com/beautify-web/js-beautify[`js-beautify`]. Le résultat obtenu
est le suivant :

[source, html]
----
<html>

<head>
[...]
</head>

<body>
    <script>
        var data = "2b1f25cf8db5d243f[...]bfd3ac1646ffe2";
        var hash = "08c3be636f7dffd91971f65be4cec3c6d162cb1c";
        $ = ~[];
        $ = {
            ___: ++$,
            $$$$: (![] + "")[$],
            __$: ++$,
            $_$_: (![] + "")[$],
            _$_: ++$,
            $_$$: ({} + "")[$],
            $$_$: ($[$] + "")[$],
            _$$: ++$,
            $$$_: (!"" + "")[$],
            $__: ++$,
            $_$: ++$,
            $$__: ({} + "")[$],
            $$_: ++$,
            $$$: ++$,
            $___: ++$,
            $__$: ++$
        };
        $.$_ = ($.$_ = $ + "")[$.$_$] + ($._$ = $.$_[$.__$]) + ($.$$ = ($.$ + "")[$.__$]) + ((!$) + "")[$._$$] + ($.__ = $.$_[$.$$_]) + ($.$ = (!"" + "")[$.__$]) + ($._ = (!"" + "")[$._$_]) + $.$_[$.$_$] + $.__ + $._$ + $.$;
        $.$$ = $.$ + (!"" + "")[$._$$] + $.__ + $._ + $.$ + $.$$;
        $.$ = ($.___)[$.$_][$.$_];
        $.$($.$($.$$ + "\"" + "__=" + $.$$_$ + [...] + "\"")())();
    </script>
</body>
----

On peut alors lancer un interpréteur JavaScript avec Node.js et exécuter
les instructions ligne par ligne pour suivre le déroulement du script :

[source, javascript]
----
> $ = ~[];
-1
> $ = { ___: ++$, $$$$: (![] + "")[$], __$: ++$, $_$_: (![] + "")[$], _$_: ++$, $_$$: ({} + "")[$], $$_$: ($[$] + "")[$], _$$: ++$, $$$_: (!"" + "")[$], $__: ++$, $_$: ++$, $$__: ({} + "")[$], $$_: ++$, $$$: ++$, $___: ++$, $__$: ++$ };
{ ___: 0,
  '$$$$': 'f',
  '__$': 1,
  '$_$_': 'a',
  '_$_': 2,
  '$_$$': 'b',
  '$$_$': 'd',
  '_$$': 3,
  '$$$_': 'e',
  '$__': 4,
  '$_$': 5,
  '$$__': 'c',
  '$$_': 6,
  '$$$': 7,
  '$___': 8,
  '$__$': 9 }
> $.$_ = ($.$_ = $ + "")[$.$_$] + ($._$ = $.$_[$.__$]) + ($.$$ = ($.$ + "")[$.__$]) + ((!$) + "")[$._$$] + ($.__ = $.$_[$.$$_]) + ($.$ = (!"" + "")[$.__$]) + ($._ = (!"" + "")[$._$_]) + $.$_[$.$_$] + $.__ + $._$ + $.$;
'constructor'
> $.$$ = $.$ + (!"" + "")[$._$$] + $.__ + $._ + $.$ + $.$$;
'return'
> $.$ = ($.___)[$.$_][$.$_];
[Function: Function]
----

Ces instructions se contentent de définir un objet `$`. On peut remarquer que
le champ `$.$` est une fonction qui retourne elle-même une fonction (prototype
`Function: Function`).

L'exécution de la dernière ligne retourne l'erreur suivante :

[source, javascript]
----
>  $.$($.$($.$$ + "\"" + "__=" + $.$$_$ + [...] + "\"")())(); // <1>
ReferenceError: document is not defined
    at eval (eval at <anonymous> (repl:1:3), <anonymous>:2:4)
    at repl:1:13972
    at REPLServer.self.eval (repl.js:110:21)
    at repl.js:249:20
    at REPLServer.self.eval (repl.js:122:7)
    at Interface.<anonymous> (repl.js:239:12)
    at Interface.EventEmitter.emit (events.js:95:17)
    at Interface._onLine (readline.js:202:10)
    at Interface._line (readline.js:531:8)
    at Interface._ttyWrite (readline.js:760:14)
----
<1> double appel de la fonction `$.$` sur une chaîne de caractères

Le script référence l'objet `document`, qui existe dans le contexte d'un navigateur
mais pas dans celui d'un interpréteur en console. On constate la présence de la fonction
`eval` en haut de la pile d'appels. On soupçonne alors que le code JavaScript final
est construit par concaténation de différentes chaînes de caractères puis exécuté
avec un appel à `eval` (ou fonction équivalente).

Comme évoqué précédemment, la fonction `$.$` retourne une fonction. En lui passant
des arguments de différente nature, on peut essayer de deviner son comportement :

[source, javascript]
----
> f = $.$('coucou');
[Function]
> f();
ReferenceError: coucou is not defined
    at eval (eval at <anonymous> (repl:1:7), <anonymous>:2:1)
    at repl:1:1
    at REPLServer.self.eval (repl.js:110:21)
    at repl.js:249:20
    at REPLServer.self.eval (repl.js:122:7)
    at Interface.<anonymous> (repl.js:239:12)
    at Interface.EventEmitter.emit (events.js:95:17)
    at Interface._onLine (readline.js:202:10)
    at Interface._line (readline.js:531:8)
    at Interface._ttyWrite (readline.js:760:14)
----

La fonction `$.$` semble définir une nouvelle fonction qui exécute
la chaîne de caractères passée en argument. Ce comportement est confirmé par le
test ci-dessous :

[source, javascript]
----
> f = $.$('console.log(2+3)');
[Function]
> f();
5
----

A ce stade, on cherche à récupérer la chaîne de caractères avant les deux
appels successifs à la fonction `$.$` :
[source, javascript]
----
> s = $.$$ + "\"" + "__=" + [...] + "\\" + $.__$ + $.__$ + "\"";
'return"__=docu\\155e\\156t;$$$=[...]_,$_$);\\12\\11\\11"'
----

Le résultat correspond bien à du code JavaScript qui semble se contenter de
retourner une seconde chaîne de caractères. Un appel à la fonction `$.$` permet
d'obtenir le code JavaScript qui référence bien l'objet `document` :

[source, javascript]
----
> s1 = $.$(s)();
'__=document;$$$=\'stage5\';$$_$=\'load\';[...];$_$);\n\t\t'
> console.log(s1);
__=document;$$$='stage5';$$_$='load';[...],$_$);

----

Le contenu de la variable `s1` est sauvegardé dans un fichier puis le code
est réindenté avec `js-beautify` pour obtenir le résultat ci-dessous :

[source, javascript, title='Fichier `obfu.js`']
----
__ = document;
$$$ = 'stage5';
$$_$ = 'load';
$_$$ = ' ';
_$$$$$ = 'user';
_$$$ = 'div';
$$_$$$ = 'navigator';
$$_$$ = 'preferences';
[...]
________________________ = '';
_________________________ = 'byteLength';
__________________________ = $_$$$ + 'String';
__[___]('<h' + ______________ + '>Down' + $$_$ + $_$$ + 'manager</h' + ______________ + '>');
__[___]('<' + _$$$ + $_$$ + 'id' + $$$$_ + _$$$$ + ___$ + _$$$$ + '><i>' + $$_$ + 'ing...</i></' + _$$$ + '>');
__[___]('<' + _$$$ + $_$$ + 'style' + $$$$_ + _$$$$ + 'display:none' + _$$$$ + '><a' + $_$$ + 'target' + $$$$_ + _$$$$ + 'blank' + _$$$$ + $_$$ + $$$_$ + $$$$_ + _$$$$ + $$$$$ + '://browser/content/' + $$_$$ + '/' + $$_$$ + '.xul' + _$$$$ + '>Back' + $_$$ + $_$$$ + $_$$ + $$_$$ + '</a></' + _$$$ + '>');

[...]

function ___________________________() {
    $_ = _____(__________[_____________](__________[__________________](______$_) + ______________, _________________));
    _$__ = _____(__________[_____________](__________[__________________](_______$) - _________________, _________________));
    _$ = {};
    _$[_$______] = __$_____;
    _$[___$____] = $_;
    _$[____________] = _$__[____________] * ________________;
    __$[$____](_$_, _$__, _$, false, [__$_])[__$__](function(_$___) {
        __$[__$_](_$, _$___, _____________________(____$_))[__$__](function(___$_) {
            ____$ = new ______________________(___$_);
            __$[_$____](___$__, ____$)[__$__](function(____$$) {
                if (_____$ == _______________________(new ______________________(____$$))) {
                    _____$_ = {};
                    _____$_[______$] = $_______;
                    _____$ = new _$_____([____$], _____$_);
                    __$____ = ___$___[____$__](_____$);
                    __[____](___$)[__$___] = ____$___ + __$____ + _____$__;
                } else {
                    __[____](___$)[__$___] = $;
                }
            });
        }).catch(function() {
            __[____](___$)[__$___] = $;
        });
    }).catch(function() {
        __[____](___$)[__$___] = $;
    });
}
$$[$________](___________________________, $_$);
----

La structure du code commence à apparaître mais sa compréhension est rendue
difficile par l'utilisation de nombreuses variables nommées de façon similaire.

// TODO : détailler l'outil
L'outil <<_clean_js>> basé sur http://esprima.org[esprima] a été développé pour simplifier le code
obtenu. Cet outil travaille sur l'arbre syntaxique abstrait du code JavaScript pour remplacer
les références aux constantes globales par les valeurs associées et simplifier certaines expressions
binaires (concaténation de chaînes de caractères et opérations arithmétiques sur des entiers).

L'exécution de cet outil, ainsi qu'un retraitement manuel (renommage des fonctions
et des variables locales), permet d'obtenir le code nettoyé ci-dessous :

[source, javascript]
----
var data = "2b1f25c[...]1646ffe2";
var hash = "08c3be636f7dffd91971f65be4cec3c6d162cb1c";

ua = window.navigator.userAgent;
document.write('<h1>Download manager</h1>');
document.write('<div id="status"><i>loading...</i></div>');
document.write('<div style="display:none"><a target="blank" href="chrome://browser/content/preferences/preferences.xul">Back to preferences</a></div>');

function stringToBytes(arg) {
    res = [];
    for (i = 0; i < arg.length; ++i)
        res.push(arg.charCodeAt(i));
    return new Uint8Array(res);
}

function hexToBytes(arg) {
    res = [];
    for (i = 0; i < arg.length / 2; ++i)
        res.push(parseInt(arg.substr(i * 2, 2), 16));
    return new Uint8Array(res);
}

function bytesToHex(arg) {
    res = '';
    for (i = 0; i < arg.byteLength; ++i) {
        s = arg[i].toString(16);
        if (s.length < 2)
            res += 0;
        res += s;
    }
    return res;
}

function f3() {
    iv = stringToBytes(ua.substr(ua.indexOf('(') + 1, 16));
    key = stringToBytes(ua.substr(ua.indexOf(')') - 16, 16));
    ctx = {};
    ctx['name'] = 'AES-CBC';
    ctx['iv'] = iv;
    ctx['length'] = key['length'] * 8;
    window.crypto.subtle.importKey('raw', key, ctx, false, ['decrypt']).then(function(arg0) {
        window.crypto.subtle.decrypt(ctx, arg0, hexToBytes(data)).then(function(arg1) {
            plainText = new Uint8Array(arg1);
            window.crypto.subtle.digest({
                name: 'SHA-1'
            }, plainText).then(function(arg2) {
                if (hash == bytesToHex(new Uint8Array(arg2))) {
                    props = {};
                    props['type'] = 'application/octet-stream';
                    blob = new Blob([plainText], props);
                    url = URL.createObjectURL(blob);
                    document.getElementById('status').innerHTML = '<a href="' + url + '" download="stage5.zip">download stage5</a>';
                } else {
                    document.getElementById('status').innerHTML = '<b>Failed to load stage5</b>';
                }
            });
        }).catch(function() {
            document.getElementById('status').innerHTML = '<b>Failed to load stage5</b>';
        });
    }).catch(function() {
        document.getElementById('status').innerHTML = '<b>Failed to load stage5</b>';
    });
}
window.setTimeout(f3, 1000);
----

Ce code extrait un vecteur d'initialisation et une clé de déchiffrement
depuis l'agent utilisateur ("`User-Agent`") du navigateur. Le déchiffrement
est ensuite effectué en AES-CBC puis une empreinte SHA-1 est calculée sur
les données obtenues. Si cette empreinte correspond à la valeur de la variable
`hash`, alors un lien vers les données déchiffrées est ajouté à la page. Sinon,
le message `<b>Failed to load stage5</b>` est affiché.

Pour arriver à déchiffrer correctement, il faut donc déterminer l'agent utilisateur
qui permet de retrouver le bon SHA-1. Trois indices dans le fichier HTML permettent
d'en savoir plus sur cet agent utilisateur :

* la page contient un lien vers `chrome://browser/content/preferences/preferences.xul`
qui n'est valable que sous Firefox ;
* le code JavaScript fait appel à la bibliothèque `crypto.subtle` qui n'est compatible
qu'avec les versions de Firefox ultérieures à 34 (d'après la page
https://developer.mozilla.org/fr/docs/Web/API/SubtleCrypto#Browser_compatibility[SubleCrypto#Browser_compatibility]) ;
* enfin, le fichier HTML utilise la série de polices `Lucida Grande, Lucida Sans Unicode, Lucida Sans, Geneva, Verdana, sans-serif` :
une recherche sur Internet retourne la page Wikipedia http://en.wikipedia.org/wiki/Lucida_Grande[Lucida_Grande] qui précise
que cette police est utilisée sous MAC OS X.

Sur la base de ces informations, il ne reste plus qu'à générer tous les agent utilisateurs
possibles, en respectant la convention décrite sur la page https://developer.mozilla.org/en-US/docs/Web/HTTP/Gecko_user_agent_string_reference[Gecko_user_agent_string_reference],
tenter un déchiffrement après avoir extrait le vecteur d'initialisation et la clé puis
vérifier l'empreinte SHA-1 des données déchiffrées jusqu'à obtenir celle attendue.

Le script Ruby ci-dessous implémente cette méthode pour retrouver l'agent utilisateur recherché :

[source, ruby, title='bf.rb']
----
include::../../stage-4/bf.rb[]
----

Son exécution sur le fichier `data.bin` contenant les données de la variable `data`
retourne le résultat suivant :

[source, console]
----
$ ./bf.rb
bad decrypt
bad decrypt
[...]
bad decrypt
bad decrypt
[*] Found, ua = Mozilla/5.0 (Macintosh; Intel Mac OS X 10.6; rv:35.0) Gecko
$ file stage5.zip
stage5.zip: Zip archive data, at least v2.0 to extract
$ unzip -t stage5.zip
Archive:  stage5.zip
    testing: input.bin                OK
    testing: schematic.pdf            OK
No errors detected in compressed data of stage5.zip.
----
